<div class="card-body">
  <%= form_with(model:[:admin, shop],local:true) do |form| %>
    <% if shop.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(shop.errors.count, "error") %> prohibited this shop from being saved:</h2>

        <ul>
        <% shop.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
        </ul>
      </div>
    <% end %>

    <div class="form-group row">
      <%= form.label :name,  class: "col-lg-3 col-form-label form-control-label"  %>
      <div class="col-lg-9">
        <%= form.text_field :name, id: :shop_name, class: "form-control", required:true %>
      </div>  
    </div>

    <div class="form-group row">
      <%= form.label :address, class: "col-lg-3 col-form-label form-control-label" %>
      <div class="col-lg-9">
        <%= form.text_field :address, class: "form-control", required:true, id: "autocomplete", onFocus: "geolocate()"%>
      </div>  
    </div>

    

    <div class="form-group row">
      <%= form.label :cover_image,class: "col-lg-3 col-form-label form-control-label" %>
      <div class="col-lg-9">
        <%= form.file_field :cover_image, id: :shop_cover_image,  required:true  %>
      </div>  
    </div>
     <%= form.hidden_field :owner_id, id: :shop_owner_id %>
     <div class="form-group">
      <label class="label-title">Shop Type</label>
      <div class="select">
        <%= form.select :business_type_id, options_for_select(BusinessType.all.collect{|lt| [lt.name, lt.id]}, (form.object.try(:business_type_id))), {class: "form-control"} %>
      </div>
    </div>
      
    <div class="form-group row">
      <label class="col-lg-3 col-form-label form-control-label"></label>
      <div class="col-lg-9 actions">
        <%= link_to 'Back', admin_shops_path, class: "btn btn-secondary" %>
        <%= form.submit class: "btn btn-primary", value: "Create Shopes" %>
      </div>
    </div>
  <% end %>
</div>  


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        lat = place.geometry.location.lat();
        long = place.geometry.location.lng();

        $("#near_loc_lat").val(lat);
        $("#near_loc_lng").val(long);
        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZO1fKh_fnrQphRnEy7knxPUcOjKQWYPU&libraries=places&callback=initAutocomplete"
async defer></script>
